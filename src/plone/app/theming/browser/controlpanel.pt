<tal:doctype tal:replace="structure string:&lt;!DOCTYPE html&gt;" />

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      tal:define="
        portal_state context/@@plone_portal_state;
        plone_view context/@@plone;
        plone_layout context/@@plone_layout;
        lang portal_state/language;
        view nocall:view | nocall: plone_view;
        portal_url portal_state/portal_url;
        ajax_load python:False;
        dummy python: request.set('disable_toolbar', True);
        site_url view/site_url;
      "
      tal:attributes="
        lang lang;
      "
      i18n:domain="plone"
>

  <metal:cache tal:replace="structure provider:plone.httpheaders" />

  <head>
    <meta charset="utf-8" />

    <div tal:replace="structure provider:plone.htmlhead"></div>
    <link tal:replace="structure provider:plone.htmlhead.links" />
    <link rel="stylesheet"
          type="text/css"
          tal:attributes="
            href string:${context/portal_url}/++theme++barceloneta/css/barceloneta.min.css;
          "
    />
    <link rel="stylesheet"
          type="text/css"
          tal:attributes="
            href string:${context/portal_url}/++resource++plone.app.theming/controlpanel.css;
          "
    />

    <tal:comment replace="nothing">
        Various slots where you can insert elements in the header from a template.
    </tal:comment>

    <div tal:replace="structure provider:plone.scripts"></div>

    <meta name="generator"
          content="Plone - http://plone.org"
    />

  </head>

  <body id="visual-portal-wrapper"
        tal:define="
          isRTL portal_state/is_rtl;
          sl python:plone_layout.have_portlets('plone.leftcolumn', view);
          sr python:plone_layout.have_portlets('plone.rightcolumn', view);
          body_class python:plone_layout.bodyClass(template, view);
        "
        tal:attributes="
          class body_class;
          dir python:isRTL and 'rtl' or 'ltr';
          python:plone_view.patterns_settings();
        "
  >

    <div tal:replace="structure provider:plone.toolbar"></div>

    <aside id="global_statusmessage">
      <div class="portalMessage info"
           role="status"
      >
        <strong i18n:translate="">Note</strong>
        <span tal:omit-tag=""
              i18n:translate="description_notheme_controlpanel"
        >
          Please note that this control panel page will never be themed.
        </span>
      </div>
      <tal:message tal:content="structure provider:plone.globalstatusmessage" />
    </aside>


    <article id="portal-column-content">

      <div metal:define-macro="content">

        <article id="content">

          <header>
            <div id="viewlet-above-content-title"
                 tal:content="structure provider:plone.abovecontenttitle"
            ></div>
            <h1 class="documentFirstHeading"
                i18n:translate="heading_theme_settings"
            >Theme settings</h1>

            <a class="link-parent"
               id="setup-link"
               tal:attributes="
                 href string:$site_url/@@overview-controlpanel;
               "
               i18n:translate=""
            >
              Site Setup
            </a>
          </header>

          <section id="content-core">

            <div class="pat-autotoc autotabs"
                 id="themeControlPanel"
                 data-pat-autotoc="section:section;levels:h2;"
            >

              <section>
                <h2 i18n:translate="">Themes</h2>

                <p i18n:translate="description_basic_settings">
            Use the buttons to create or upload a new Diazo theme,
            or select an existing theme from a the list below.
                </p>

                <div class="m-1">
                  <!-- <a href="#overlay-new-theme" class="btn btn-large btn-primary pat-plone-modal"
                data-pat-plone-modal="width: 80%"
                i18n:translate="">New theme</a> -->

                  <a class="btn btn-large btn-primary pat-plone-modal"
                     href="#overlay-upload"
                     data-pat-plone-modal="width: 80%"
                     i18n:translate=""
                  >Upload Zip file</a>

                  <a class="btn btn-large btn-primary"
                     target="_blank"
                     tal:attributes="
                       href string:$site_url/test_rendering#top;
                     "
                     i18n:translate=""
                  >Test Styles</a>

                  <a class="btn btn-large btn-primary pat-plone-modal"
                     data-pat-plone-modal="
                    width: 85%;
                    loadLinksWithinModal: true;
                    content: .content"
                     tal:attributes="
                       href string:$site_url/@@theming-controlpanel-help;
                     "
                     i18n:translate=""
                  >Help</a>
                </div>

                <div id="themesList">

                  <div class="themeEntry"
                       tal:repeat="theme view/themeList"
                       tal:attributes="
                         class python:theme['selected'] and 'themeEntry activeThemeEntry' or 'themeEntry';
                         id string:themeEntry-${theme/name};
                         data-theme theme/name;
                         data-theme-title theme/title;
                       "
                  >

                    <div clas="themeEntryDetail">

                      <span class="themeEntryTitle">
                        <span tal:replace="theme/title">Title</span>
                        <span class="warning"
                              tal:condition="theme/override"
                              i18n:translate=""
                        >(this theme overrides a filesystem theme)</span>
                        <span class="themeActive"
                              tal:condition="theme/selected"
                              i18n:translate=""
                        >(active)</span>
                      </span>

                      <div class="themeEntryWrapper">

                        <div class="previewImageContainer">
                          <img tal:attributes="
                                 src theme/preview;
                               " />
                        </div>

                        <div class="themeDescription"
                             tal:content="theme/description"
                        ></div>

                        <div class="themeEntryControls">

                          <form method="post"
                                tal:attributes="
                                  action request/URL;
                                "
                          >
                            <input tal:replace="structure context/@@authenticator/authenticator" />
                            <input name="themeName"
                                   type="hidden"
                                   tal:attributes="
                                     value theme/name;
                                   "
                            />
                            <button class="btn btn-outline-primary btn-light btn-sm"
                                    name="form.button.Enable"
                                    type="submit"
                                    tal:condition="not:theme/selected"
                                    i18n:translate=""
                            >Activate</button>
                            <button class="btn btn-outline-primary btn-light btn-sm"
                                    name="form.button.Enable"
                                    type="submit"
                                    tal:condition="theme/selected"
                                    i18n:translate=""
                            >Update</button>
                            <button class="btn btn-outline-primary btn-light btn-sm"
                                    name="form.button.Disable"
                                    type="submit"
                                    tal:condition="theme/selected"
                                    i18n:translate=""
                            >Deactivate</button>
                            <button class="btn btn-outline-primary btn-light btn-sm"
                                    name="form.button.InvalidateCache"
                                    type="submit"
                                    tal:condition="theme/selected"
                                    i18n:translate=""
                            >Clear Cache</button>
                          </form>

                          <form method="get"
                                target="_blank"
                                tal:attributes="
                                  action string:${context/absolute_url}/++theme++${theme/name}/@@download-zip;
                                "
                          >
                            <button class="btn btn-outline-primary btn-light btn-sm"
                                    i18n:translate=""
                            >Download</button>
                          </form>

                          <a class="btn btn-danger pat-plone-modal"
                             href="#"
                             tal:condition="theme/editable"
                             tal:attributes="
                               href string:#modal-delete-${theme/name};
                             "
                             i18n:translate=""
                          >Delete</a>
                          <!-- Delete confirmation overlay -->
                          <div class="plone-modal"
                               style="display:none"
                               tal:condition="theme/editable"
                               tal:attributes="
                                 id string:modal-delete-${theme/name};
                               "
                          >
                            <h1 class="documentFirstHeading"
                                i18n:translate="theming_controlpanel_delete_confirm"
                            >
                                    Are you sure you want to delete
                              <span tal:content="string:${theme/name}"
                                    i18n:name="theme_name"
                              ></span>
                            </h1>

                            <p class="documentDescription"
                               i18n:translate="theming_controlpanel_delete_confirm_description"
                            >
                                    This operation cannot be undone. Note that filesystem themes
                                    cannot be deleted from within Plone.
                            </p>

                            <form method="post"
                                  name="delete"
                                  tal:attributes="
                                    action request/URL;
                                  "
                            >
                              <input tal:replace="structure context/@@authenticator/authenticator" />
                              <input id="deleteConfirmTheme"
                                     name="themes:list"
                                     type="hidden"
                                     tal:attributes="
                                       value string:${theme/name};
                                     "
                              />
                              <div class="btn-group">
                                <input class="btn btn-danger save"
                                       name="form.button.DeleteSelected"
                                       type="submit"
                                       value="Delete"
                                       i18n:attributes="value"
                                />
                                <input class="btn btn-primary cancel"
                                       name="form.button.Cancel"
                                       type="submit"
                                       value="Cancel"
                                       i18n:attributes="value"
                                />
                              </div>
                            </form>
                          </div>

                        </div>

                      </div>

                    </div>
                  </div>

                  <div class="visualClear"><!-- --></div>

                </div>
              </section>
              <section>
                <h2 i18n:translate="">Advanced settings</h2>

                <form class="pat-formunloadalert"
                      method="post"
                      name="advanced"
                      tal:define="
                        errors view/errors;
                      "
                      tal:attributes="
                        action request/URL;
                      "
                >

                  <div class="pat-autotoc autotabs"
                       data-pat-autotoc="section:fieldset;levels:legend;"
                  >
                    <fieldset>
                      <legend i18n:translate="">Theme details</legend>

                      <p i18n:translate="description_advanced">
                       Use the fields below to configure the Diazo theme
                       manually. Usually, these settings are applied by
                       enabling a theme from the
                        <strong>Themes</strong>
                       tab.
                      </p>

                      <div class="field"
                           tal:define="
                             selected python:request.get('themeEnabled', view.theme_settings.enabled);
                           "
                      >

                        <input name="themeEnabled:boolean:default"
                               type="hidden"
                               value=""
                        />
                        <input id="themeEnabled"
                               name="themeEnabled:boolean"
                               type="checkbox"
                               value="1"
                               tal:attributes="
                                 checked python:'themeEnabled' if selected else None;
                               "
                        />
                        <label for="themeEnabled"
                               i18n:translate="label_theme_enabled"
                        >Theme enabled</label>
                        <div class="formHelp"
                             i18n:translate="help_theme_enabled"
                        >
                            If enabled the currently configured Diazo theme (if any)
                            will be applied.
                        </div>

                      </div>

                      <div tal:define="
                             error errors/rules | nothing;
                             rules python:request.get('rules', view.theme_settings.rules);
                           "
                           tal:attributes="
                             class python:'field error' if error else 'field';
                           "
                      >

                        <label for="rules"
                               i18n:translate="label_rules"
                        >Rules file</label>
                        <div class="formHelp"
                             i18n:translate="help_rules"
                        >
                            Enter a path or URL for the theme rules file.
                        </div>

                        <div class="errorMessage"
                             tal:condition="error"
                             tal:content="error"
                        ></div>

                        <input id="rules"
                               name="rules"
                               size="50"
                               type="text"
                               tal:attributes="
                                 value rules;
                               "
                        />

                      </div>

                      <div tal:define="
                             error errors/absolutePrefix | nothing;
                             absolutePrefix python:request.get('absolutePrefix', view.theme_settings.absolutePrefix);
                           "
                           tal:attributes="
                             class python:'field error' if error else 'field';
                           "
                      >

                        <label for="absolutePrefix"
                               i18n:translate="label_absolute_prefix"
                        >Absolute path prefix</label>
                        <div class="formHelp"
                             i18n:translate="help_absolute_prefix"
                        >
                            If your theme uses relative paths for images, stylesheets
                            or other resources, you can enter a prefix here to make
                            sure these resources will work regardless of which page
                            Plone is rendering.
                        </div>

                        <div class="errorMessage"
                             tal:condition="error"
                             tal:content="error"
                        ></div>

                        <input id="absolutePrefix"
                               name="absolutePrefix"
                               size="50"
                               type="text"
                               tal:attributes="
                                 value absolutePrefix;
                               "
                        />

                      </div>

                      <div tal:define="
                             error errors/doctype | nothing;
                             doctype python:request.get('doctype', view.theme_settings.doctype);
                           "
                           tal:attributes="
                             class python:'field error' if error else 'field';
                           "
                      >

                        <label for="doctype"
                               i18n:translate="label_doctype"
                        >Doctype</label>
                        <div class="formHelp"
                             i18n:translate="help_doctype"
                        >
                            You can specify a Doctype string which will be set on
                            the output, for example "&lt;!DOCTYPE html&gt;". If left
                            blank the default XHTML 1.0 transistional Doctype or
                            that set in the Diazo theme is used.
                        </div>

                        <div class="errorMessage"
                             tal:condition="error"
                             tal:content="error"
                        ></div>

                        <input id="doctype"
                               name="doctype"
                               size="50"
                               type="text"
                               tal:attributes="
                                 value doctype;
                               "
                        />

                      </div>

                      <div class="field"
                           tal:define="
                             selected python:request.get('readNetwork', view.theme_settings.readNetwork);
                           "
                      >

                        <input name="readNetwork:boolean:default"
                               type="hidden"
                               value=""
                        />
                        <input id="readNetwork"
                               name="readNetwork:boolean"
                               type="checkbox"
                               value="1"
                               tal:attributes="
                                 checked python:'readNetwork' if selected else None;
                               "
                        />
                        <label for="readNetwork"
                               i18n:translate="label_read_network"
                        >Read network</label>
                        <div class="formHelp"
                             i18n:translate="help_read_network"
                        >
                            Allow rules and themes to be read from remote servers.
                        </div>

                      </div>

                      <div tal:define="
                             error errors/hostnameBlacklist | nothing;
                             hostnameBlacklist view/theme_settings/hostnameBlacklist | python:[];
                             hostnameBlacklist python: view.hostname_blacklist or hostnameBlacklist;
                           "
                           tal:attributes="
                             class python:'field error' if error else 'field';
                           "
                      >

                        <label for="hostnameBlacklist"
                               i18n:translate="label_hostname_blacklist"
                        >Unthemed host names</label>
                        <div class="formHelp"
                             i18n:translate="help_hostname_blacklist"
                        >
                            If there are hostnames that you do not want to be
                            themed, you can list them here, one per line. This is
                            useful during theme development, so that you can
                            compare the themed and unthemed sites. In some cases,
                            you may also want to provided an unthemed host alias
                            for content administrators to be able to use 'plain'
                            Plone.
                        </div>

                        <div class="errorMessage"
                             tal:condition="error"
                             tal:content="error"
                        ></div>

                        <textarea id="hostnameBlacklist"
                                  cols="50"
                                  name="hostnameBlacklist:lines"
                                  rows="5"
                                  tal:content="python: '\n'.join(hostnameBlacklist)"
                        ></textarea>

                      </div>

                      <div tal:define="
                             error errors/parameterExpressions | nothing;
                             parameterExpressions python:view.theme_settings.parameterExpressions or {};
                             parameterExpressions python:['%s = %s' % (k,v) for k,v in parameterExpressions.items()];
                             parameterExpressions python:request.get('parameterExpressions', parameterExpressions);
                           "
                           tal:attributes="
                             class python:'field error' if error else 'field';
                           "
                      >

                        <label for="parameterExpressions"
                               i18n:translate="label_parameter_expressions"
                        >Parameter expressions</label>
                        <div class="formHelp"
                             i18n:translate="help_parameter_expressions"
                        >
                            You can define parameters that will be passed
                            to the compiled theme here. In your rules file, you can
                            refer to a parameter by
                          <code>$name</code>. Parameters
                            are defined using TALES expressions, which should
                            evaluate to a string, a number, a boolean or None.
                            Available variables are
                          <code>context</code>,
                          <code>request</code>,
                          <code>portal</code>,
                          <code>portal_state</code>, and
                          <code>context_state</code>. Define one variable
                            per line, in the format
                          <code>name = expression</code>.
                        </div>

                        <div class="errorMessage"
                             tal:condition="error"
                             tal:content="error"
                        ></div>

                        <textarea id="parameterExpressions"
                                  cols="50"
                                  name="parameterExpressions:lines"
                                  rows="8"
                                  tal:content="python:'\n'.join(parameterExpressions)"
                        ></textarea>
                      </div>

                    </fieldset>
                    <fieldset>
                      <legend i18n:translate="">Theme base</legend>

                      <p i18n:translate="description_advanced_base">
                       The settings below control the presentation of the
                        <em>content</em>
                         produced by Plone before a Diazo theme
                       is applied. Note that these settings will have an effect
                       even if no Diazo theme is currently enabled.
                      </p>

                      <div class="field"
                           tal:define="
                             selected python:request.get('themeBase', view.pskin.getDefaultSkin());
                           "
                      >

                        <label for="themeBase"
                               i18n:translate="label_theme_base"
                        >Theme base</label>

                        <div class="formHelp"
                             i18n:translate="help_theme_base"
                        >
                            The theme base defines a collection of templates and other
                            resources that makes up the raw content to which a theme is
                            applied. Most Diazo themes will assume the default theme base,
                            so only change this if you know what you are doing.
                        </div>

                        <select id="themeBase"
                                name="themeBase"
                                size="1"
                        >
                          <option tal:repeat="skin view/skinsVocabulary"
                                  tal:content="skin/title"
                                  tal:attributes="
                                    value skin/value;
                                    selected python:skin.value == selected and 'selected' or None;
                                  "
                          ></option>
                        </select>

                      </div>

                      <div class="field"
                           tal:define="
                             selected python:request.get('markSpecialLinks', view.mark_special_links);
                           "
                      >

                        <input name="markSpecialLinks:boolean:default"
                               type="hidden"
                               value=""
                        />
                        <input id="markSpecialLinks"
                               name="markSpecialLinks:boolean"
                               type="checkbox"
                               value="1"
                               tal:attributes="
                                 checked python:'markSpecialLinks' if selected else None;
                               "
                        />
                        <label for="markSpecialLinks"
                               i18n:translate="label_mark_special_links"
                        >Mark special links</label>
                        <div class="formHelp"
                             i18n:translate="help_mark_special_links"
                        >
                            If enabled all external links will be marked with link type specific icons.
                        </div>

                      </div>

                      <div class="field"
                           tal:define="
                             selected python:request.get('extLinksOpenInNewWindow', view.ext_links_open_new_window);
                           "
                      >

                        <input name="extLinksOpenInNewWindow:boolean:default"
                               type="hidden"
                               value=""
                        />
                        <input id="extLinksOpenInNewWindow"
                               name="extLinksOpenInNewWindow:boolean"
                               type="checkbox"
                               value="1"
                               tal:attributes="
                                 checked python:'extLinksOpenInNewWindow' if selected else None;
                               "
                        />
                        <label for="extLinksOpenInNewWindow"
                               i18n:translate="label_ext_links_open_new_window"
                        >External links open in new window</label>
                        <div class="formHelp"
                             i18n:translate="help_ext_links_open_new_window"
                        >
                            If enabled all external links in the content region open in a new window.
                        </div>

                      </div>

                    </fieldset>
                    <fieldset>
                      <legend i18n:translate="">Custom Styles</legend>

                      <div tal:define="
                             error errors/custom_css | nothing;
                             custom_css view/theme_settings/custom_css | python: '';
                             custom_css python:request.get('custom_css', custom_css);
                           "
                           tal:attributes="
                             class python:'field error' if error else 'field';
                           "
                      >

                        <label for="custom_css"
                               i18n:translate="label_custom_css"
                        >Custom CSS</label>
                        <div class="formHelp"
                             i18n:translate="help_custom_css"
                        >
                            Define your own custom CSS in the field below. This is a good place for quick customizations of things like colors and the toolbar. Definitions here will override previously defined CSS of Plone. Please use this only for small customizations, as it is hard to keep track of changes here. For bigger changes you most likely want to customize a full theme and make your changes there.
                        </div>
                        <div class="theming_doc_link">
                          <p><a href="https://docs.plone.org/adapt-and-extend/theming"
                               target="_blank"
                               i18n:translate="label_theming_doc_link"
                            >Theming documentation</a></p>
                        </div>

                        <div class="errorMessage"
                             tal:condition="error"
                             tal:content="error"
                        ></div>

                        <textarea class="pat-code-editor"
                                  id="custom_css"
                                  cols="160"
                                  name="custom_css"
                                  placeholder="Put your plain css..."
                                  rows="40"
                                  data-pat-code-editor="language: css; theme: light"
                                  tal:content="custom_css"
                                  i18n:attributes="placeholder"
                        ></textarea>

                      </div>
                    </fieldset>
                  </div>


                  <div class="btn-group">
                    <input class="btn btn-success save"
                           name="form.button.AdvancedSave"
                           type="submit"
                           value="Save"
                           i18n:attributes="value"
                    />

                    <input class="btn btn-primary cancel"
                           name="form.button.Cancel"
                           type="submit"
                           value="Cancel"
                           i18n:attributes="value"
                    />
                  </div>

                  <input tal:replace="structure context/@@authenticator/authenticator" />



                </form>

              </section>

            </div>

            <!-- Upload overlay -->
            <div class="modal"
                 id="overlay-upload"
            >
              <div>
                <h1 class="documentFirstHeading"
                    i18n:translate="theming_controlpanel_upload"
                >Upload theme</h1>

                <p class="documentDescription"
                   i18n:translate="description_import"
                >
           You can import a Zip file containing an existing theme.
           This should contain a single top level directory, which will be used as
           the theme identifier. If no Diazo
                  <code>rules.xml</code>
                   or
                  <code>manifest.cfg</code>
                   file is found in this directory, a
           default
                  <code>rules.xml</code>
                   file will be created.
                </p>

                <form class="pat-formunloadalert"
                      enctype="multipart/form-data"
                      method="post"
                      name="import"
                      tal:define="
                        errors view/errors;
                      "
                      tal:attributes="
                        action request/URL;
                      "
                >

                  <div class="field"
                       tal:define="
                         error errors/themeArchive | nothing;
                       "
                       tal:attributes="
                         class python:'field error' if error else 'field';
                       "
                  >

                    <div class="formHelp"
                         i18n:translate="help_theme_archive"
                    >
                    Select a file to upload.
                    </div>

                    <div class="errorMessage"
                         tal:condition="error"
                         tal:content="error"
                    ></div>

                    <input id="themeArchive"
                           name="themeArchive"
                           type="file"
                    />

                  </div>

                  <div class="field"
                       tal:define="
                         selected python:request.get('enableNewTheme', False);
                       "
                  >
                    <input name="enableNewTheme:boolean:default"
                           type="hidden"
                           value=""
                    />
                    <input id="enableNewTheme"
                           name="enableNewTheme:boolean"
                           type="checkbox"
                           value="1"
                           tal:attributes="
                             checked python:'enableNewTheme' if selected else None;
                           "
                    />
                    <label for="enableNewTheme"
                           i18n:translate="label_enable_new_theme"
                    >Immediately enable new theme</label>
                    <div class="formHelp"
                         i18n:translate="help_enable_new_theme"
                    >
                    Select this option to enable the newly uploaded theme
                    immediately.
                    </div>
                  </div>

                  <div class="field"
                       tal:define="
                         selected python:request.get('replaceExisting', False);
                       "
                  >
                    <input name="replaceExisting:boolean:default"
                           type="hidden"
                           value=""
                    />
                    <input id="replaceExisting"
                           name="replaceExisting:boolean"
                           type="checkbox"
                           value="1"
                           tal:attributes="
                             checked python:'replaceExisting' if selected else None;
                           "
                    />
                    <label for="replaceExisting"
                           i18n:translate="label_replace_existing"
                    >Replace existing theme</label>
                    <div class="formHelp"
                         i18n:translate="help_replace_existing"
                    >
                    Select this option to replace any existing theme that
                    may have been uploaded previously.
                    </div>
                  </div>

                  <div class="btn-group">
                    <input class="btn btn-success save"
                           name="form.button.Import"
                           type="submit"
                           value="Import"
                           i18n:attributes="value"
                    />

                    <input class="btn btn-primary cancel"
                           name="form.button.Cancel"
                           type="submit"
                           value="Cancel"
                           i18n:attributes="value"
                    />
                  </div>

                  <input tal:replace="structure context/@@authenticator/authenticator" />

                </form>

              </div>
            </div>


          </section>
        </article>
      </div>
    </article>
  </body>
</html>
